bits 16
org 0x7c00

BOOT_ADDR	equ	0x7C00

VGA_SEG		equ	0xB800
VGA_POS		equ	0x0500
VGA_XPOS	equ	0x0500
VGA_YPOS	equ	0x0501

start:		cli
		mov ax, VGA_SEG
		mov es, ax
		mov ax, BOOT_ADDR
		mov ss, ax
		xor ax, ax
		mov ds, ax
		call clrScr
getkey:		xor ah, ah
		int 0x16
		mov ah, 0x07
		cmp al, 0x0D
		je newline
		jmp printch

getoffset:	push ax	
		xor ah, ah
		mov al, [VGA_YPOS]
		mov bx, ax
		shl bx, 2
		add bx, ax
		shl bx, 4
		mov al, [VGA_XPOS]
		add bx, ax
		add bx, bx
		pop ax
		ret

newline:	push bx
		mov bx, [VGA_POS]
		jmp printch.newline

printch:	push bx
		call getoffset
		mov [es:bx], ax
		mov bx, [VGA_POS]
		inc bl
		cmp bl, 80
		jne .return
.newline	xor bl, bl
		inc bh
		cmp bh, 25
		jne .return
		push ax
		push cx
		xor bx, bx
		mov cx, 1920
.loop1:		mov ax, [es:bx+160]
		mov [es:bx], ax
		add bx, 2
		dec cx
		jnz .loop1
		xor ax, ax
		mov cl, 80
.loop2:		mov [es:bx], ax
		add bx, 2
		dec cl
		jnz .loop2
		pop cx
		pop ax
		mov bx, 24 * 0x100
.return:	mov [VGA_POS], bx
		pop bx
		jmp getkey

clrScr:		push ax
		push bx
		push cx
		xor ax, ax
		mov bx, ax
		mov cx, 80*25
.loop:		mov [es:bx], ax
		inc bx
		dec cx
		jnz .loop
		pop cx
		pop bx
		pop ax
		ret		

times 510-($-$$) db 0
dw 0xAA55
